css3 -webkit-transition:background-position cubic-bezier(0.45, 0.3, 0.18, 1.0) 2.6s;
transition:background-position cubic-bezier(0.45, 0.3, 0.18, 1.0) 2.6s;




//去html代码
        paste: function(ele) {
            setTimeout(function() {
                var content = ele.innerHTML,
                    valiHTML = ["br"];
                content = content.replace(/_moz_dirty=""/gi, "").replace(/<\/ ?tr[^>]*>/gi, "[br]").replace(/<\/ ?td[^>]*>/gi, "&nbsp;&nbsp;").replace(/<(ul|dl|ol)[^>]*>/gi, "[br]").replace(/<(li|dd)[^>]*>/gi, "[br]").replace(/<p [^>]*>/gi, "[br]").replace(new RegExp("<(/?(?:" + valiHTML.join("|") + ")[^>]*)>", "gi"), "[$1]").replace(/<[^i][^>]*>/gi, "").replace(new RegExp("\\[(/?(?:" + valiHTML.join("|") + "|img|span)[^\\]]*)\\]", "gi"), "<$1>");
                if (!msc.browser.mozilla) {
                    content = content.replace(/\r?\n/gi, "<br>");
                }
                // var re = content.match(/<img[^>]*>/gi);
                // var obj = {}, con = [];
                // if (re != null) {
                //     for (var i = 0; i < re.length; i++) {
                //         if (!obj[re[i]]) {
                //             con.push(re[i]);
                //             obj[re[i]] = true;
                //         }
                //     }
                //     for (var i = 0; i < con.length; i++) {
                //         content = content.replace(new RegExp(con[i], "gi"), '<img face=true src="' + con[i].match(/http:\/\/[^"|^']*/) + '" class="tb_img_big"/> ');
                //     }
                // }
                ele.innerHTML = content;
                ele = content = valiHTML = null;
            }, 1);
        },







<base target="_blank"><!--[if lte IE 6]> </base> <![endif]-->


 return !!el.className && (" " + el.className + " ").indexOf(" " + cls + " ") > -1

"tab"+ model.charAt(0).toUpperCase() + model.substr(1);//slice也可以,你懂的

setTimeout("1")做标识

new Date-1  // +new Date // new Date().getTime() // new Date().valueOf();  时间戳, 有显式转,隐式转

sort 操作的是 原数组,并返回最新的
push,操作原数组,并返回最新的length
pop操作原,返回去的
shift操作原,返回去的
unshift操作原,返回length
slice不操作原,返回新arr
splice操作原,返回去的

Push()尾部添加 pop()尾部删除
Unshift()头部添加  shift()头部删除


nginx -s stop
start nginx
nginx -s reload

//去ie10的连接点击背景问题
a:active {
    background-color: transparent;
}


@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) { /*修改ie10 active bug*/
	a:active {
	    background-color: transparent;
	}
}


找到了 word-wrap:break-word与word-break:break-all共同点是都能把长单词强行断句，不同点是word-wrap:break-word会首先起一个新行来放置长单词，新的行还是放不下这个长单词则会对长单词进行强制断句；而word-break:break-all则不会把长单词放在一个新行里，当这一行放不下的时候就直接强制断句了。
word-break简单粗暴= =

(fuction(a,b){}(a,b) 前里的a,b是形参，后面自运行传递的是实参


1.丢弃小数部分,保留整数部分
parseInt(5/2)

2.向上取整,有小数就整数部分加1

Math.ceil(5/2)

3,四舍五入.

Math.round(5/2)

4,向下取整

Math.floor(5/2)
random() 返回 0 ~ 1 之间的随机数 1 2 3 
round(x) 把一个数四舍五入为最接近的整数 1 2 3 


substr 为 (起,字符长) 支持-1, 1 = -1+.length
substring 为 (起,止) 不支持 -1
slice 为 (起,止) 支持 -1, -1 = -1+.length
 


//18
		function validId18(str){
			if(str.length != 18) return false;
			iW = new Array(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2,1);
			iSum = 0;
			for( i=0;i<17;i++){
				iC = str.charAt(i) ;
				iVal = parseInt(iC);
				iSum += iVal * iW[i];
			}
			iJYM = iSum % 11;
			var sJYM = '';
			if(iJYM == 0) sJYM = "1";
			else if(iJYM == 1 ) sJYM = "0";
			else if(iJYM == 2 ) sJYM = "x";
			else if(iJYM == 3 ) sJYM = "9";
			else if(iJYM == 4 ) sJYM = "8";
			else if(iJYM == 5 ) sJYM = "7";
			else if(iJYM == 6 ) sJYM = "6";
			else if(iJYM == 7 ) sJYM = "5";
			else if(iJYM == 8 ) sJYM = "4";
			else if(iJYM == 9) sJYM = "3";
			else if(iJYM == 10) sJYM = "2";
			var cCheck = str.charAt(17).toLowerCase();
			if( cCheck != sJYM ){
				return false; 
			}
			return true;
		}
		//15  
		function validId15(str){     
			if(str.length != 15) return false;
			str=str+"";     
			for(var i=0;i<str.length;i++){     
				if(str.charAt(i)<'0'||str.charAt(i)>'9'){     
					return false;     
					break;     
				}     
			}     
			var year=str.substr(6,2);     
			var month=str.substr(8,2);     
			var day=str.substr(10,2);     
			var sexBit=str.substr(14);     
		
			if(year<'01'||year >'90')return false;     
			if(month<'01'||month >'12')return false;     
			if(day<'01'||day >'31')return false;
			return true;     
		}


php json:
header("Content-type:application/json;charset=UTF-8");
header('Content-type: image/jpeg');
header('Content-Disposition: attachment; filename="min.js"');
	readfile('http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING']."&type=css");


header("Content-type: ". ($type==="js"?'application/javascript':'text/css') ."; charset=utf-8"); 


overflow:hidden;text-overflow: ellipsis;white-space: nowrap;


//第三方登录窗口
    conf.openWin = function(url){
        var win = XM(window), set = [(win.height()-420)/2, (win.width()-520)/2];
        window.open(url, 'connect_window', 'height=420, width=560, toolbar =no, menubar=no, scrollbars=yes, resizable=no,top='+ set[0] +',left='+ set[1] +', location=no, status=no');
    };


 强制不换行
            div{
                white-space:nowrap;
            }
        自动换行
            div{
                word-wrap: break-word;
                word-break: normal;
            }
        强制英文单词断行
            div{
                word-break:break-all;
            }

1. word-break:break-all;只对英文起作用，以字母作为换行依据
2. word-wrap:break-word; 只对英文起作用，以单词作为换行依据
3.{white-space:pre-wrap; 只对中文起作用，强制换行
4.{white-space:nowrap; 强制不换行，都起作用
5.{white-space:nowrap; overflow:hidden; text-overflow:ellipsis;不换行，超出部分隐藏且以省略号形式出现
http://blog.csdn.net/ldl22847/article/details/7247702


filter:alpha(opacity=100);


5.Sublime Text Css自动完成
写Css会发现 Sublime Text自动完成时会多一个空格，看着特别别扭现提供解决方法：
首先打开Preferences> Browse Packages 这时会打开你本机的一个路径，
找到这个路径下的一个CSS文件夹下的 css_completions.py(注意区分不是此css_completions.pyc，文件名相似)文件，拖到Sublime Text 里就可以自动打开了，
然后，搜索 关键字l.append((p, p + ": "))  把冒号后面的空格去除，保存即可。


//emmet空格
{
     "preferences": {
         "css.valueSeparator": ":"
      }
 }

//tab->空格
 "tab_size": 4,
    "translate_tabs_to_spaces": true 

sublime YUI http://qianduanblog.com/1918.html#5%E3%80%81%E9%85%8D%E7%BD%AEYUI+Compressor


st插件：
Image2Base64 img转base64
ConvertToUTF8 转码
Emmet 代码自动完成 tab
JsFormat js格式化 ctrl+alt+f
SublimeCodeIntel 代码提示
Tag 代码提示
TortoiseSVN svn alt+c/u/r
YUI Compressor 代码压缩 f7


ie6里的a->href=javascript 导致js失效

by sentsin
body{background:#fff;}/*other*/

body{background:#000\9;}/*ie*/


body{background:#0f0\9\0;}/*ie9+*/

body{background:#00f\0;}/*ie8+*/


body{background:#f00\0/;}/*ie8*/

body{*background:#ff0;}/*ie7-*/

body{_background:#f0f;}/*ie6*/

function stopBubble(e) {
        //如果提供了事件对象，则这是一个非IE浏览器
        if ( e && e.stopPropagation )
            //因此它支持W3C的stopPropagation()方法
            e.stopPropagation();
        else
            //否则，我们需要使用IE的方式来取消事件冒泡
            window.event.cancelBubble = true;
    }
    //阻止浏览器的默认行为
    function stopDefault( e ) {
        //阻止默认浏览器动作(W3C)
        if ( e && e.preventDefault )
            e.preventDefault();
        //IE中阻止函数器默认动作的方式
        else
            window.event.returnValue = false;
        return false;
    }


定义和用法
async 属性规定一旦脚本可用，则会异步执行。
注释：async 属性仅适用于外部脚本（只有在使用 src 属性时）。
注释：有多种执行外部脚本的方法：
如果 async="async"：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）
如果不使用 async 且 defer="defer"：脚本将在页面完成解析时执行
如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本



T.browser.firefox ? window.location.href = "about:blank" : (window.open("", "_self", ""), window.close())


new Image引起的泄漏, by baidu
var T,baidu=T= function(){ 
///import baidu.sio;
 
baidu.sio.extend({
  log : function() {
    var url = this.url ;
    var img = new Image(),
        key = 'tangram_sio_log_' + Math.floor(Math.random() *
              2147483648).toString(36);
 
    // 这里一定要挂在window下
    // 在IE中，如果没挂在window下，这个img变量又正好被GC的话，img的请求会abort
    // 导致服务器收不到日志
    window[key] = img;
 
    img.onload = img.onerror = img.onabort = function() {
      // 下面这句非常重要
      // 如果这个img很不幸正好加载了一个存在的资源，又是个gif动画
      // 则在gif动画播放过程中，img会多次触发onload
      // 因此一定要清空
      img.onload = img.onerror = img.onabort = null;
 
      window[key] = null;
 
      // 下面这句非常重要
      // new Image创建的是DOM，DOM的事件中形成闭包环引用DOM是典型的内存泄露
      // 因此这里一定要置为null
      img = null;
    };
 
    // 一定要在注册了事件之后再设置src
    // 不然如果图片是读缓存的话，会错过事件处理
    // 最后，对于url最好是添加客户端时间来防止缓存
    // 同时服务器也配合一下传递Cache-Control: no-cache;
    img.src = url;
  }
});
 return baidu;
}();